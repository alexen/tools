///
/// stopwatch.h
///
/// Created on: Feb 27, 2017
///     Author: alexen
///

#pragma once

#include <chrono>


namespace tools {


/// Простой класс секундомера
///
/// Пример использования:
/// @code
/// // Создаем класс секундомера (секундомер запускается автоматически)
/// //
/// tools::Stopwatch stopwatch;
///
/// // Выполняем какую-то работу, время которой необходимо замерить
/// // ...
/// // ...
/// // ...
///
/// // Снимаем замер (без перезапуска секундомера)
/// //
/// const auto timeElapsed = stopwatch.snapshot();
///
/// // Для выполнения нижеследующих операций необходимо подключить stopwatch_io.h
/// //
/// // Выводим замер времени в поток вывода
/// //
/// std::cout << "time elapsed: " << timeElapsed << "\n";
///
/// // Или более простой способ: вывести в поток замер времени без перезапуска секундомера
/// //
/// std::cout << "time elapsed: " << stopwatch << "\n";
///
/// @endcode
class Stopwatch
{
public:
     /// Создает и запускает секундомера
     ///
     /// Под "запуском" секундомера подразумевается сохранение стартовой метки времени
     Stopwatch();

     /// Перезапуск секундомера
     ///
     /// Функция просто обновляет стартовую метку времени текущим временем
     void restart();

     /// Возвращает замер времени не перезапуская секундомер
     ///
     /// Замером времени является разница между текущим временем и стартовой меткой времени
     std::chrono::system_clock::duration snapshot() const;

private:
     std::chrono::system_clock::time_point start_;
};


} // namespace tools
